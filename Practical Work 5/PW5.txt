
"""
Practical Work 5
4. Given an undirected graph, find a Hamiltonian cycle (if it exists).
"""
def adjacencymatrix(G):
    """
    Computes the adjacency matrix of a graph G
    :param G:
    :return:
    """
    n_vertex = G.getVertexNumber()
    m = [[0 for i in range(0, n_vertex)] for j in range(0, n_vertex)]

    for i in range(0, n_vertex):
        for j in range(0, n_vertex):
            if G.checkifEdgeExists(i, j) == 1:
                m[i][j] = 1
            if i == j:
                m[i][j] = 0

    return m


def printHamiltonianCycle(path, length):
    """
    Prints  a Hamiltonian  cycle as a sequence of vertices
    :param path: the sequence of vertices that form the Hamiltonian cycle
    :param length: the length of the sequence (consisting of the vertex number of the graph)
    :return: -
    """
    for i in range(0, length):
        print(path[i], end=" ")

    print(path[0])


def isNext(adj_matrix, path, current_position, vertex):
    """
    We check if the given vertex can be added on the
    current_position index in the Hamiltonian cycle we're currently constructing
    :param adj_matrix: the adjacency matrix of  the graph
    :param path: the Hamiltonian cycle we are currently constructing
    :param current_position: the index on which we'd like to add the vertex
    :param vertex: the vertex we want to add to the Hamiltonian cycle
    :return: true if the vertex can be added, else false
    """

    # first we check if the current vertex is adjacent
    # to the  previously added vertex
    prev_vertex = path[current_position - 1]

    if adj_matrix[prev_vertex][vertex] == 0:
        return False

    # if we've reached this  point it means the current vertex is adjacent to the previous one in the cycle
    # now we  need to check if the current vertex has already been added to the Hamiltonian cycle

    for i in range(0, current_position):
        if path[i] == vertex:
            return False

    return True


def HamiltonianCycle(N, adj_matrix, path, current_position):
    """
    Backtracking algorithm to find a Hamiltonian cycle in an undirected graph
    :param N: number of vertices
    :param adj_matrix: the graph's adjacency matrix
    :param path: the Hamiltonian cycle we are currently working on
    :param current_position: the position on which we add the next vertex
    :return: True if the graph contains a Hamiltonian cycle, else False
    """

    # if all vertices are included in the path and the last vertex
    # is adjacent to the first vertex they make a cycle

    if current_position == N:
        prev_vertex = path[current_position - 1]
        current_vertex = path[0]
        if adj_matrix[prev_vertex][current_vertex] == 1:
            return True
        else:
            return False

    # we check if different vertices (except for 0) fit in the Hamiltonian cycle

    for vertex in range(1, N):
        if isNext(adj_matrix, path, current_position, vertex):
            path[current_position] = vertex

            if HamiltonianCycle(N, adj_matrix, path, current_position+1):
                return True

            # if the current vertex is not part of a Hamiltonian Cycle remove it
            path[current_position] = -1

    return False


def PW5():
    G = Graph()
    file_name = input("From where would you like to load the graph? >>")
    G.loadPlainGraph(file_name)

    n = G.getVertexNumber()

    path = [-1 for i in range(0, n)]

    # We put 0 as the first vertex in the path
    # Because the graph is undirected, the Hamiltonyan cycle can start at any point

    path[0] = 0

    adj = adjacencymatrix(G)

    if HamiltonianCycle(n, adj, path, 1) == True:
        print("The graph contains at least a Hamiltonian cycle, one of them being: ")
        printHamiltonianCycle(path, len(path))
    else:
        print("The graph does not contain anny Hamiltonian cycle")

